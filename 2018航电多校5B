#include<bits/stdc++.h>

using namespace std;
const int inf = 0x3f3f3f3f;
const int maxn = 20;
int num1[maxn], num2[maxn], num3[maxn];
int len, k, maxx, minn;

void update(){
    if(num1[num3[1]] == 0) return;
    for(int i = 1; i <= len; i++) num2[i] = num3[i];
    int sum = 0, t = 0;
    for(int i = 1; i <= len; i++){
        sum = sum * 10 + num1[num3[i]];
        if(num2[i] != i){
            for(int j = i + 1; j <= len; j++){
                if(num2[j] == i){
                    num2[i] ^= num2[j] ^= num2[i] ^= num2[j];
                    t++;
                    if(t > k) return;
                    break;
                }
            }
        }
    }
    if(t > k) return;
    minn = min(minn, sum);
    maxx = max(maxx, sum);
}

int main(){
    int T;
    cin>>T;
    while(T--){
        memset(num2, 0, sizeof(num2));
        memset(num3, 0, sizeof(num3));
        char s[20];
        scanf("%s %d",s + 1, &k);
        for(int i = 1; s[i] != '\0'; i++){
            num1[i] = s[i] - '0';
            num2[num1[i]]++;
            num3[num1[i]]++;
        }
        len = strlen(s + 1);
        if(k >= len - 1){
            for(int i = 1; i <= 9; i++){
                if(num2[i]){
                    printf("%d",i);
                    num2[i]--;
                    break;
                }
            }
            for(int i = 0; i <= 9; i++) while(num2[i]){printf("%d",i);num2[i]--;}
            printf(" ");
            for(int i = 9; i >= 0; i--) while(num3[i]){printf("%d",i);num3[i]--;}
            printf("\n");
        }
        else{
            minn = inf;
            maxx = 0;
            for(int i = 1; i <= len; i++) num3[i] = i;
            update();
            while(next_permutation(num3 + 1, num3 + 1 + len)) update();
            printf("%d %d\n",minn, maxx);
        }
    }
    return 0;
}
/*
暴力枚举下一个全排列，当k >= len-1时一定能构造出最大值和最小值，否则计算排列还原为原来的顺序需要的交换次数
*/
