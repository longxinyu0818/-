#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
const int maxn = 3e5 + 10;
const int mod = 998244353;
vector<int> v[maxn];
int dep[maxn],  ans[maxn], vis[maxn];
int n, m, cnt;

ll Pow(ll a, ll b){
    ll res = 1;
    while(b){
        if(b&1) res = res * a % mod;
        a = a * a % mod;
        b >>= 1;
    }
    return res % mod;
}

void dfs(int x, int fa){
    dep[x] = dep[fa] + 1;
    vis[x] = 1;
    for(int i = 0; i < v[x].size(); i++){
        int now = v[x][i];
        if(now == fa) continue;
        if(dep[now] != 0){
            if(dep[x] > dep[now]) ans[++cnt] = dep[x] - dep[now] + 1;
        }
        else dfs(now, x);
    }
}

int main(){
    scanf("%d%d",&n,&m);
    for(int i = 1; i <= m; i++){
        int x, y;
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    dfs(1, 0);
    ll res = m;
    /*for(int i = 1; i <= n; i++) cout<<ans[i]<<" ";
    cout<<endl;*/
    for(int i = 1; i <= cnt; i++) res -= ans[i];
    res = Pow(2LL, res);
    for(int i = 1; i <= cnt; i++){
        ll tmp = Pow(2LL, ans[i]);
        tmp = (tmp - 1 + mod) % mod;
        //cout<<tmp<<endl;
        res = (res * tmp) % mod;
    }
    printf("%lld\n",res);
    return 0;
}
/*
DFS求环的大小，最后答案为2^mi-1+2^n，其中mi为第i个环的大小，n为不在环中的边
*/
