#include<bits/stdc++.h>

using namespace std;
const int maxn = 1e5 + 10;
int a[maxn], po[maxn<<2], ro[maxn<<2];

void pushup(int k){
    po[k] = po[k << 1] ^ po[k << 1 | 1];
    ro[k] = ro[k << 1] ^ ro[k << 1 | 1];
}

void build(int l, int r, int k){
    if(l == r){
        if(l & 1) po[k] = a[l];
        else ro[k] = a[l];
        return;
    }
    int mid = (l + r) >> 1;
    build(l, mid, k << 1);
    build(mid + 1, r, k << 1 | 1);
    pushup(k);
}

void update(int l, int r, int x, int y, int k){
    if(l == r){
        if(l & 1) po[k] = y;
        else ro[k] = y;
        return;
    }
    int mid = (l + r) >> 1;
    if(x <= mid) update(l, mid, x, y, k << 1);
    else update(mid + 1, r, x, y, k << 1 | 1);
    pushup(k);
}

int query(int l, int r, int L, int R, int k){
    if(L <= l && r <= R){
        if(L & 1) return po[k];
        else return ro[k];
    }
    int mid = (l + r) >> 1;
    int ans = 0;
    if(L <= mid) ans = ans ^ query(l, mid, L, R, k << 1);
    if(R > mid) ans = ans ^ query(mid + 1, r, L, R, k << 1 | 1);
    return ans;
}

int main(){
    int T, k = 1;
    cin>>T;
    while(T--){
        int n, m;
        scanf("%d%d",&n,&m);
        for(int i = 1; i <= n; i++) scanf("%d",&a[i]);
        build(1, n, 1);
        printf("Case #%d: \n",k++);
        while(m--){
            int op, x, y;
            scanf("%d%d%d",&op,&x,&y);
            if(op == 0) update(1, n, x, y, 1);
            else{
                if((y - x + 1) & 1){
                    int ans = query(1, n, x, y, 1);
                    printf("%d\n",ans);
                }
                else printf("0\n");
            }
        }
    }
    return 0;
}
/*
打表找规律当区间长度为偶数时，最后结果为0，为奇数时，最后结果F(l,r)=a[l]^a[l+2]^....直到l+2<=r;
建两颗线段树即可
*/
