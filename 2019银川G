#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
const int maxn = 1e5 + 10;
ll sum[maxn<<2][8], a[maxn<<2][8], lazy[maxn<<2][8];
ll n, q;

ll _max(ll a, ll b){
    return a > b ? a : b;
}

void push(ll k, ll id){
    sum[k][id] = _max(sum[k<<1][id],sum[k<<1|1][id]);
}

void down(ll k, ll id, ll len){
    lazy[k<<1][id] += lazy[k][id];
    lazy[k<<1|1][id] += lazy[k][id];
    sum[k<<1][id] += lazy[k][id] * (len - (len>>1));
    sum[k<<1|1][id] += lazy[k][id] * (len>>1);
    lazy[k][id] = 0;
}

void update(ll l, ll r, ll L, ll R, ll k, ll id, ll val){
    if(L <= l && r <= R){
        sum[k][id] += val;
        lazy[k][id] += val;
        return;
    }
    down(k, id, r - l + 1);
    ll mid = (l + r) >> 1;
    if(L <= mid) update(l, mid, L, R, k << 1, id, val);
    if(R > mid) update(mid + 1, r, L, R, k << 1 | 1, id, val);
    push(k, id);
}

ll query(ll l, ll r, ll k, ll id, ll L, ll R){
    if(L <= l && r <= R) return sum[k][id];
    down(k, id, r - l + 1);
    ll la = 0;
    ll lb = 0;
    ll mid = (l + r) >> 1;
    if(L <= mid) la = query(l, mid, k << 1, id, L, R);
    if(R > mid) lb = query(mid + 1, r, k << 1 | 1, id, L, R);
    return _max(la, lb);
}

int main(){
    scanf("%lld %lld",&n, &q);
    while(q--){
        ll op, l, r, val;
        scanf("%lld",&op);
        if(op == 1){
            scanf("%lld %lld %lld",&l, &r, &val);
            ll cnt = 0, flag = 0;
            while(val % 2 == 0){val /= 2; cnt++; flag = 1;}
            if(flag) update(1, n, l, r, 1, 1, cnt);
            cnt = 0, flag = 0;
            while(val % 3 == 0){val /= 3; cnt++; flag = 1;}
            if(flag) update(1, n, l, r, 1, 2, cnt);
            cnt = 0, flag = 0;
            while(val % 5 == 0){val /= 5; cnt++; flag = 1;}
            if(flag) update(1, n, l, r, 1, 3, cnt);
            cnt = 0, flag = 0;
            while(val % 7 == 0){val /= 7; cnt++; flag = 1;}
            if(flag) update(1, n, l, r, 1, 4, cnt);
        }
        else{
            scanf("%lld %lld",&l, &r);
            ll a = 0, b = 0, c = 0, d = 0;
            a = query(1, n, 1, 1, l, r);
            b = query(1, n, 1, 2, l, r);
            c = query(1, n, 1, 3, l, r);
            d = query(1, n, 1, 4, l, r);
            printf("ANSWER %lld\n",_max(a,_max(b,_max(c,d))));
        }
    }
    return 0;
}
/*
开四颗线段树维护区间最大值，查询每一颗树的区间最大值
*/
