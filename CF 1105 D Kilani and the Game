#include<bits/stdc++.h>

using namespace std;
const int maxn = 1e3 + 10;
int vis[maxn][maxn], ans[maxn], a[maxn];
int n, m, p;
char mpt[maxn][maxn];
int dir[4][2] = {1, 0, 0, 1, -1, 0, 0, -1};
struct node
{
    int x, y, t;
};
queue<node> q1[maxn], q2[maxn];

bool check(int x, int y){
    if(x >= 0 && y >= 0 && x < n && y < m) return true;
    return false;
}

int bfs(int id){
    while(!q1[id].empty()){
        node now = q1[id].front();
        now.t = 0;
        q1[id].pop();
        q2[id].push(now);
    }
    int cnt = 0;
    while(!q2[id].empty()){
        node now = q2[id].front();
        q2[id].pop();
        if(now.t == a[id]){
            q1[id].push(now);
            continue;
        }
        for(int i = 0; i < 4; i++){
            int nx = now.x + dir[i][0];
            int ny = now.y + dir[i][1];
            if(check(nx, ny) && !vis[nx][ny] && mpt[nx][ny] != '#'){
                q2[id].push(node{nx,ny,now.t+1});
                vis[nx][ny] = id;
                cnt++;
            }
        }
    }
    if(cnt > 0)  return 1;
    else return 0;
}

int main(){
    cin>>n>>m>>p;
    for(int i = 1; i <= p; i++) cin>>a[i];
    for(int i = 0; i < n; i++){
        scanf("%s",mpt[i]);
        for(int j = 0; j < m; j++){
            if(isdigit(mpt[i][j])){
                int x = mpt[i][j] - '0';
                vis[i][j] = x;
                q1[x].push(node{i,j,0});
            }
        }
    }
    while(1){
        int cnt = 0;
        for(int i = 1; i <= p; i++) cnt += bfs(i);
        if(cnt==0) break;
    }
    for(int i = 0; i < n; i++) for(int j = 0; j < m; j++) ans[vis[i][j]]++;
    for(int i = 1; i <= p; i++) cout<<ans[i]<<" ";
    cout<<endl;
    return 0;
}
/*
每个玩家一个队列，以及一个最外围点的队列，bfs即可
*/
