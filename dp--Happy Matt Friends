#include<bits/stdc++.h>

using namespace std;
const int maxn = 1e6 + 200;
int dp[45][maxn*2];
int a[45];

int main(){
    int T, k = 1;
    cin>>T;
    while(T--){
        int n, m;
        cin>>n>>m;
        for(int i = 1; i <= n; i++) cin>>a[i];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        for(int i = 1; i <= n; i++){
            for(int j = 0; j <= 1e6; j++){
                dp[i][j] += dp[i - 1][j];
                dp[i][j ^ a[i]] += dp[i - 1][j];
            }
        }
        long long ans = 0;
        for(int i = m; i <= maxn; i++) ans += dp[n][i];
        //cout<<ans<<endl;
        printf("Case #%d: %lld\n",k++,ans);
    }
    return 0;
}
//求有几个子集的异或和大于等于m,其实还是穷举子集类的dp,dp[i][j]代表前i个元素组成的子集中异或和为j的个数，
//状态方程 dp[i][j]+=dp[i-1][j];(不取第i个数)dp[i][j^a[i]]+=dp[i][j](取第i个数).
