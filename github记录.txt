/**********PTA链表去重*************/
/**********2019年3月24日09:36:02**********/
         结构体模拟链表  res数组保存去重后的链表   ans数组保存被去重的链表
#include<bits/stdc++.h>

using namespace std;
const int maxn = 1e5 + 10;
struct node
{
    int num, next;
}a[maxn];
bool vis[maxn];
int res[maxn], ans[maxn];

int main(){
    int n, k, p;
    cin>>n>>k;
    for(int i = 0; i < k; i++){
        cin>>p;
        cin>>a[p].num>>a[p].next;
    }
    int cnt1 = 0, cnt2 = 0;
    for(int i = 0; i < k && n != -1; i++){
        if(!vis[abs(a[n].num)]){
            res[cnt1++] = n;
            vis[abs(a[n].num)] = 1;
            n = a[n].next;
        }
        else{
            ans[cnt2++] = n;
            n = a[n].next;
        }
    }
    if(cnt1){
        for(int i = 0; i < cnt1; i++){
            if(i == 0) printf("%05d %d",res[i], a[res[i]].num);
            else printf(" %05d\n%05d %d", res[i], res[i], a[res[i]].num);
        }
        cout<<" "<<-1<<endl;
    }
    if(cnt2){
        for(int i = 0; i < cnt2; i++){
            if(i == 0) printf("%05d %d",ans[i], a[ans[i]].num);
            else printf(" %05d\n%05d %d", ans[i], ans[i], a[ans[i]].num);
        }
        cout<<" "<<-1<<endl;
    }
    return 0;
}
/***************PT图着色问题***************/
/***********2019年3月24日10:58:01************/
  mp数组保存边的连通性， color数组保存每个节点的颜色，check函数判断两个点的颜色是否相同
#include<cstdio>
#include<algorithm>
#include<map>
#include<iostream>

using namespace std;
const int maxn = 505;
int n, m, k, t;
int mp[maxn][maxn], color[maxn];
map<int, int> M;

int check(){
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= n; j++){
            if(mp[i][j] && color[i] == color[j])
                return 0;
        }
    }
    return 1;
}

int main(){
    cin>>n>>m>>k;
    for(int i = 1; i <= m; i++){
        int l, r;
        cin>>l>>r;
        mp[l][r] = mp[r][l] = 1;
    }
    cin>>t;
    while(t--){
        M.clear();
        int cnt = 0, flag = 0;
        for(int i = 1; i <= n; i++){
            cin>>color[i];
            if(M[color[i]] == 0)
                M[color[i]] = ++cnt;
        }
        if(cnt == k) flag = 1;
        if(check() && flag) cout<<"Yes"<<endl;
        else cout<<"No"<<endl;
    }
    return 0;
}
/************PTA凑零钱**************/
/******2019年3月25日15:09:41******/
一看题目以为是个背包问题，但是题目要求有多解时输出最小序列，dp好像不满足条件，于是开始暴力dfs
提前判断所有的钱是不是够付钱的（剪枝），贴上代码
#include<bits/stdc++.h>

using namespace std;
const int maxn = 1e5 + 10;
int a[maxn], ans[maxn];
int n, m, sum, flag, len;
void dfs(int num, int s, int now){
    if(flag) return;
    if(s > m) return;
    if(s == m){
        len = now;
        flag = 1;
        return ;
    }
    if(s + a[num] > m) return;
    if(num >= n) return;
    ans[now] = a[num];
    dfs(num + 1, s + a[num], now + 1);
    dfs(num + 1, s, now);
}

int main(){
    cin>>n>>m;
    for(int i = 0; i < n; i++) cin>>a[i], sum+=a[i];
    if(sum < m) cout<<"No Solution"<<endl;
    else{
        sort(a, a + n);
        dfs(0, 0, 0);
        if(!flag) cout<<"No Solution"<<endl;
        else{
            cout<<ans[0];
            for(int i = 1; i < len; i++) cout<<" "<<ans[i];
            cout<<endl;
        }
    }
    return 0;
}
/*************PTA特殊堆栈 **************/
/******2019年3月25日16:14:56**********/
一开始看错题意wa了一发,才发现取中值得时候要排序的后的中值。
ok简简单单，直接暴力写，结果超时，然后搜题解才想起来原来
stl真是个好东西！！！！！！！！！！！！！lower_bound真好用
贴代码：
#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<stack>
#include<string>

using namespace std;
stack<int> st;
string s;
vector<int> v;

int main(){
    int n, tmp;
    cin>>n;
    vector<int>::iterator it;
    while(n--){
        cin>>s;
        if(s == "Pop"){
            if(st.empty()) cout<<"Invalid"<<endl;
            else{
                int num = st.top();
                cout<<num<<endl;
                it = lower_bound(v.begin(), v.end(), num);
                v.erase(it);
                st.pop();
            }
        }
        else if(s == "PeekMedian"){
            if(st.empty()) cout<<"Invalid"<<endl;
            else{
                int len = v.size();
                if(len == 1) cout<<v[0]<<endl;
                else if(len%2 == 1) cout<<v[len/2]<<endl;
                else if(len%2 == 0)cout<<v[len/2-1]<<endl;
            }
        }
        else if(s == "Push"){
            cin>>tmp;
            st.push(tmp);
            it = lower_bound(v.begin(), v.end(), tmp);
            v.insert(it, tmp);
        }
    }
    return 0;
}
