#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
const int maxn = 1e5 + 10;
int a[maxn], b[maxn], pos[maxn], c[maxn];
ll arr[maxn] = {0, 0, 10};
int n;

void add(int x){
    while(x <= n + 55) c[x] += 1, x += x & -x;
}

int Sum(int x){
    int res = 0;
    while(x) res += c[x], x -= x & -x;
    return res;
}

int f(int x){
    if(x == 0) return 1;
    int cnt = 0;
    while(x) cnt++, x /= 10;
    return cnt;
}

int main(){
    cin>>n;
    for(int i = 1; i <= n; i++) cin>>a[i], b[i] = a[i];
    sort(b + 1, b + 1 + n);
    ll ans = 0;
    for(int i = 3; i <= 15; i++) arr[i] = arr[i - 1] * 10;
    for(int i = 1; i <= n; i++) pos[i] = lower_bound(b + 1, b + 1 + n, a[i]) - b;
    for(int i = n; i >= 1; i--){
        int num = a[i], cnt = f(a[i]);
        while(1){
            ++cnt;
            int tmp = arr[cnt] - a[i];
            int po = lower_bound(b + 1, b + 1 + n, tmp) - b - 1;
            if(po == n) break;
            ans += Sum(n) - Sum(po);
        }
        add(pos[i]);
    }
    cout<<ans<<endl;
    return 0;
}
/*
枚举进1位，2位。。。需要的最小值，二分查询这个值的位置，树状数组维护一下i+1到n之间的贡献
*/
