#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
const ll mod1 = 1e9 + 7;
const ll mod2 = 1e9 + 9;
const ll base = 5003;
const int maxn = 1e5 + 10;
ll hash1[maxn], hash2[maxn], po1[maxn], po2[maxn];
int a[maxn], n, m, k, cnt, ans;
vector<int> v[maxn];

void init(){
    po1[0] = po2[0] = 1;
    for(int i = 1; i <= 100002; i++) po1[i] = po1[i - 1] * base % mod1;
    for(int i = 1; i <= 100002; i++) po2[i] = po2[i - 1] * base % mod2;
}

ll ask1(int l, int r){
    return (hash1[l - 1] * po1[r - l + 1] % mod1 - hash1[r] + mod1) % mod1;
}

ll ask2(int l, int r){
    return (hash2[l - 1] * po2[r - l + 1] % mod2 - hash2[r] + mod2) % mod2;
}///查找子串的hash值

bool check(int x, int y){
    if((a[x] + cnt) % m != (a[y] + cnt) % m) return (a[x] + cnt) % m < (a[y] + cnt) % m;
    int l = 1, r = n;
    while(l < r){
        int mid = (l + r + 1) >> 1;
        if(ask1(x, x + mid - 1) == ask1(y, y + mid - 1) && ask2(x, x + mid - 1) == ask2(y, y + mid - 1)) l = mid;
        else r = mid - 1;
    }
    if(l == n) return false;
    return (a[x + l] + cnt) % m < (a[y + l] + cnt) % m;
}///判断分别以x,y为首的那个字典序更小

int main(){
    init();
    scanf("%d%d%d",&n, &m, &k);
    for(int i = 1; i <= n; i++){
        scanf("%d",&a[i]);
        v[a[i]].push_back(i);
        a[i + n] = a[i];
    }
    int pos = -1;
    for(int i = 1; i <= n + n; i++){
        hash1[i] = (hash1[i - 1] * base % mod1 + a[i]) % mod1;
        hash2[i] = (hash2[i - 1] * base % mod2 + a[i]) % mod2;
    }
    for(int i = 0; i < m; i++){
        if(v[i].empty()) continue;
        pos = v[i][0];
        for(int j = 1; j < v[i].size(); j++) if(check(v[i][j], pos)) pos = v[i][j];
        printf("%d\n",ans = a[pos + k - 1]);
        break;
    }
    for(int i = 1; i < m; i++){
        cnt = i;
        if(v[m - i].empty()){
            printf("%d\n",++ans);
            continue;
        }
        else{
            pos = v[m - i][0];
            for(int j = 1; j < v[m - i].size(); j++) if(check(v[m - i][j], pos)) pos = v[m - i][j];
            printf("%d\n",ans = (a[pos + k - 1] + i) % m);
        }
    }
    return 0;
}
///双哈希，二分以x, y为起点的哪一个字典序更小
