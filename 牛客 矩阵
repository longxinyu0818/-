#include<bits/stdc++.h>

using namespace std;
typedef unsigned  long long ull;
const int p1 = 469762049;
const int p2 = 998244353;
const int maxn = 505;
ull Hash[maxn][maxn], pow1[maxn], pow2[maxn];
char s[maxn][maxn];
unordered_map<ull,bool> M;
int n, m;

ull get_hash(int x1, int y1, int x2, int y2){
    return Hash[x2][y2]-Hash[x1-1][y2]*pow1[x2-x1+1]-Hash[x2][y1-1]*pow2[y2-y1+1]+Hash[x1-1][y1-1]*pow1[x2-x1+1]*pow2[y2-y1+1];
}

bool check(int pos){
    for(int i = 1; i + pos - 1 <= n; i++){
        for(int j = 1; j + pos - 1 <= m; j++){
            ull tmp = get_hash(i, j, i + pos - 1, j + pos - 1);
            if(M[tmp]) return true;
            M[tmp] = true;
        }
    }
    return false;
}

int main(){
    scanf("%d%d",&n,&m);
    int len = max(n, m);
    pow1[0] = pow2[0] = 1;
    for(int i = 1; i <= len; i++){
        pow1[i] = pow1[i - 1] * p1;
        pow2[i] = pow2[i - 1] * p2;
    }
    for(int i = 1; i <= n; i++) scanf("%s",s[i] + 1);
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            Hash[i][j] = Hash[i][j - 1] * p2 + Hash[i - 1][j]*p1 - Hash[i - 1][j - 1] * p1 * p2 + s[i][j];
        }
    }
    int l = 0, r = min(n, m);
    while(l < r - 1){
        int mid = (l + r) >> 1;
        if(check(mid)) l = mid;
        else r = mid;
    }
    cout<<l<<endl;
    return 0;
}
///二分+哈希
///哈希不是很熟练，记录一个二维的子矩阵哈希
